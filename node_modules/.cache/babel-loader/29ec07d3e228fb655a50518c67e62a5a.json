{"ast":null,"code":"const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action, '---------------', state);\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, {\n        id: action.id,\n        text: action.text,\n        completed: false\n      }];\n\n    case 'TODO':\n      let data = JSON.parse(localStorage.getItem('persistantState'));\n      console.log(data, 'dataaaaaaaaaa');\n      return data;\n\n    case 'COMPLETE_TODO':\n      return {\n        completed: true\n      };\n\n    case 'REMOVE_TODO':\n      let record = JSON.parse(localStorage.getItem('persistantState'));\n      let updatedRecords = record.filter(_ref => {\n        let {\n          id\n        } = _ref;\n        return id !== action.id;\n      });\n      let updatedLocal = localStorage.setItem(\"persistantState\", updatedRecords);\n      return updatedRecords;\n    // case 'DELETE_ITEM':\n    //     return {\n    //       ...state,\n    //       state: state.items.filter((item, index) => index !== action.payload)\n    //     }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // import { HANDLE_ADD } from \"./actions\";\n// const initialState = {\n//     note : ''\n// }\n// const handleDelete = (id) => {\n//     let list = JSON.parse(localStorage.getItem('data')) || [];\n//     const updatedList = list.filter((list) => list.id !== id);\n//     const updatedRecords = userRecord.filter((record) => record.id !== id);\n//     setUserRecord(updatedRecords);\n//     localStorage.setItem('data', JSON.stringify(updatedList));\n// }\n// function reducer(state = initialState, action){\n//     switch(action.type){\n//     }\n// }","map":{"version":3,"sources":["/home/codecorners/demo/redux-todo-app/src/reducers.js"],"names":["reducer","state","action","console","log","type","id","text","completed","data","JSON","parse","localStorage","getItem","record","updatedRecords","filter","updatedLocal","setItem"],"mappings":"AAAA,MAAMA,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,iBAApB,EAAuCD,KAAvC;;AACA,UAAQC,MAAM,CAACG,IAAf;AACI,SAAK,UAAL;AACI,aAAO,CACH,GAAGJ,KADA,EAEH;AACIK,QAAAA,EAAE,EAAEJ,MAAM,CAACI,EADf;AAEIC,QAAAA,IAAI,EAAEL,MAAM,CAACK,IAFjB;AAGIC,QAAAA,SAAS,EAAE;AAHf,OAFG,CAAP;;AASJ,SAAK,MAAL;AACI,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAX;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ,EAAkB,eAAlB;AAEA,aAAOA,IAAP;;AAEJ,SAAK,eAAL;AACI,aAAO;AACHD,QAAAA,SAAS,EAAE;AADR,OAAP;;AAKJ,SAAK,aAAL;AACI,UAAIM,MAAM,GAAGJ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAb;AACA,UAAIE,cAAc,GAAGD,MAAM,CAACE,MAAP,CAAc;AAAA,YAAC;AAAEV,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKJ,MAAM,CAACI,EAA1B;AAAA,OAAd,CAArB;AACA,UAAIW,YAAY,GAAGL,YAAY,CAACM,OAAb,CAAqB,iBAArB,EAAwCH,cAAxC,CAAnB;AACA,aAAOA,cAAP;AAMJ;AACA;AACA;AACA;AACA;;AAEA;AACI,aAAOd,KAAP;AAxCR;AA0CH,CA5CD;;AA8CA,eAAeD,OAAf,C,CAcA;AAEA;AACA;AACA;AACE;AACc;AACA;AACA;AACA;AACA;AACA;AAChB;AACA;AAEA;AACA","sourcesContent":["const reducer = (state = [], action) => {\n    console.log(action, '---------------', state)\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n\n        case 'TODO':\n            let data = JSON.parse(localStorage.getItem('persistantState'))\n            console.log(data, 'dataaaaaaaaaa');\n\n            return data\n\n        case 'COMPLETE_TODO':\n            return {\n                completed: true\n            }\n\n\n        case 'REMOVE_TODO':\n            let record = JSON.parse(localStorage.getItem('persistantState'))\n            let updatedRecords = record.filter(({ id }) => id !== action.id);\n            let updatedLocal = localStorage.setItem(\"persistantState\", updatedRecords)\n            return updatedRecords\n\n\n\n\n\n        // case 'DELETE_ITEM':\n        //     return {\n        //       ...state,\n        //       state: state.items.filter((item, index) => index !== action.payload)\n        //     }\n\n        default:\n            return state\n    }\n}\n\nexport default reducer\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { HANDLE_ADD } from \"./actions\";\n\n// const initialState = {\n//     note : ''\n// }\n  // const handleDelete = (id) => {\n                //     let list = JSON.parse(localStorage.getItem('data')) || [];\n                //     const updatedList = list.filter((list) => list.id !== id);\n                //     const updatedRecords = userRecord.filter((record) => record.id !== id);\n                //     setUserRecord(updatedRecords);\n                //     localStorage.setItem('data', JSON.stringify(updatedList));\n                // }\n// function reducer(state = initialState, action){\n//     switch(action.type){\n\n//     }\n// }"]},"metadata":{},"sourceType":"module"}