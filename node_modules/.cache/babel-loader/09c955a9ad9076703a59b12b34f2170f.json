{"ast":null,"code":"import * as UserTypes from './actions';\nconst initialState = {\n  users: {},\n  allUsers: {},\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    is_admin: 0,\n    status: 0,\n    portal_number: '',\n    floor: ''\n  },\n  success_message: \"\",\n  error_message: \"\",\n  validation_errors: {},\n  list_spinner: false,\n  create_update_spinner: false\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UserTypes.SET_USER_DEFAULTS:\n      return { ...state,\n        user: { ...state.user\n        },\n        success_message: \"\",\n        error_message: \"\",\n        validation_errors: {},\n        list_spinner: false,\n        create_update_spinner: false\n      };\n\n    case UserTypes.LIST_USERS:\n      return { ...state,\n        list_spinner: true\n      };\n\n    case UserTypes.LIST_USERS_SUCCESS:\n      return { ...state,\n        users: action.data,\n        allUsers: action.data,\n        list_spinner: false\n      };\n\n    case UserTypes.LIST_USERS_FAILURE:\n      return { ...state,\n        error_message: action.error,\n        list_spinner: false\n      };\n\n    case UserTypes.SEARCH_DATA:\n      let value = action.data;\n      console.log(state.users.data, 'ssssssssssssssss', action.data);\n\n      if (value) {\n        let filteredValues = [];\n        filteredValues.data = state.users.data.filter(user => {\n          return user.name.toLowerCase().includes(value);\n        });\n        return { ...state,\n          users: filteredValues\n        };\n      }\n\n      return { ...state,\n        users: state.allUsers\n      };\n\n    case UserTypes.CREATE_USERS:\n      return { ...state,\n        create_update_spinner: true\n      };\n\n    case UserTypes.CREATE_USERS_SUCCESS:\n      return { ...state,\n        create_update_spinner: false,\n        user: action.data.data,\n        success_message: action.data.message,\n        error_message: \"\",\n        validation_errors: {}\n      };\n\n    case UserTypes.CREATE_USERS_FAILURE:\n      return { ...state,\n        create_update_spinner: false,\n        error_message: action.error.message,\n        validation_errors: action.error.errors,\n        success_message: \"\"\n      };\n\n    case UserTypes.SHOW_USER:\n      return { ...state,\n        create_update_spinner: true\n      };\n\n    case UserTypes.SHOW_USER_SUCCESS:\n      return { ...state,\n        create_update_spinner: false,\n        user: { ...action.data.data\n        }\n      };\n\n    case UserTypes.SHOW_USER_FAILURE:\n      return { ...state,\n        create_update_spinner: false,\n        error_message: action.error.message\n      };\n\n    case UserTypes.EDIT_USERS:\n      return { ...state,\n        create_update_spinner: true\n      };\n\n    case UserTypes.EDIT_USERS_SUCCESS:\n      return { ...state,\n        create_update_spinner: false,\n        user: action.data.data,\n        success_message: action.data.message,\n        error_message: \"\",\n        validation_errors: {}\n      };\n\n    case UserTypes.EDIT_USERS_FAILURE:\n      return { ...state,\n        create_update_spinner: false,\n        error_message: action.error.message,\n        validation_errors: action.error.errors,\n        success_message: \"\"\n      };\n\n    case UserTypes.DELETE_USERS:\n      return { ...state,\n        list_spinner: true\n      };\n\n    case UserTypes.DELETE_USERS_SUCCESS:\n      let users = state.users;\n      users.data = state.users.data.filter(item => item.id != action.id);\n      return { ...state,\n        list_spinner: false,\n        users: users,\n        success_message: action.message,\n        error_message: ''\n      };\n\n    case UserTypes.DELETE_USERS_FAILURE:\n      return { ...state,\n        list_spinner: false,\n        error_message: action.error.message,\n        success_message: ''\n      };\n\n    case UserTypes.RESET_USER_FIELDS:\n      return { ...state,\n        user: {\n          id: \"\",\n          name: \"\",\n          email: \"\",\n          is_admin: 0,\n          status: 0,\n          portal_number: '',\n          floor: ''\n        }\n      };\n\n    case UserTypes.HANDLE_USER_CHANGE:\n      return handleChange(state, action);\n\n    default:\n      return state;\n  }\n};\n/**\n * handle field change\n */\n\n\nfunction handleChange(state, action) {\n  if (action.field !== 'status') {\n    return { ...state,\n      user: { ...state.user,\n        [action.field]: action.data\n      }\n    };\n  } else {\n    if (action.field === 'status') {\n      let checked = state.user.status;\n\n      if (action.checked == true) {\n        checked = 1;\n      } else if (action.checked == false) {\n        checked = 0;\n      }\n\n      return { ...state,\n        user: { ...state.user,\n          status: checked\n        }\n      };\n    } else {\n      let checked = state.user.is_admin;\n\n      if (action.checked == true) {\n        checked = 1;\n      } else if (action.checked == false) {\n        checked = 0;\n      }\n\n      return { ...state,\n        user: { ...state.user,\n          is_admin: checked\n        }\n      };\n    }\n  }\n}\n\nexport default reducer; // const reducer = (state = [], action) => {\n//     console.log(action, '---------------', state)\n//     switch (action.type) {\n//         case 'ADD_TODO':\n//             return [\n//                 ...state,\n//                 {\n//                     id: action.id,\n//                     text: action.text\n//                 }\n//             ]\n//         case 'TODO':\n//             let data = JSON.parse(localStorage.getItem('persistantState'))\n//             console.log(data, 'dataaaaaaaaaa');\n//             return data\n//         case 'REMOVE_TODO':\n//             return state.filter(({ id }) => id !== action.id);\n//         default:\n//             return state\n//     }\n// }\n// export default reducer\n// // import { HANDLE_ADD } from \"./actions\";\n// // const initialState = {\n// //     note : ''\n// // }\n//   // const handleDelete = (id) => {\n//                 //     let list = JSON.parse(localStorage.getItem('data')) || [];\n//                 //     const updatedList = list.filter((list) => list.id !== id);\n//                 //     const updatedRecords = userRecord.filter((record) => record.id !== id);\n//                 //     setUserRecord(updatedRecords);\n//                 //     localStorage.setItem('data', JSON.stringify(updatedList));\n//                 // }\n// // function reducer(state = initialState, action){\n// //     switch(action.type){\n// //     }\n// // }","map":{"version":3,"sources":["/home/codecorners/demo/redux-todo-app/src/reducers.js"],"names":["UserTypes","initialState","users","allUsers","user","id","name","email","is_admin","status","portal_number","floor","success_message","error_message","validation_errors","list_spinner","create_update_spinner","reducer","state","action","type","SET_USER_DEFAULTS","LIST_USERS","LIST_USERS_SUCCESS","data","LIST_USERS_FAILURE","error","SEARCH_DATA","value","console","log","filteredValues","filter","toLowerCase","includes","CREATE_USERS","CREATE_USERS_SUCCESS","message","CREATE_USERS_FAILURE","errors","SHOW_USER","SHOW_USER_SUCCESS","SHOW_USER_FAILURE","EDIT_USERS","EDIT_USERS_SUCCESS","EDIT_USERS_FAILURE","DELETE_USERS","DELETE_USERS_SUCCESS","item","DELETE_USERS_FAILURE","RESET_USER_FIELDS","HANDLE_USER_CHANGE","handleChange","field","checked"],"mappings":"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","sourcesContent":["\nimport * as UserTypes from './actions';\n\nconst initialState = {\n    users: {},\n    allUsers:{},\n    user: {\n        id: \"\",\n        name: \"\",\n        email: \"\",\n        is_admin: 0,\n        status:0,\n        portal_number:'',\n        floor:'',\n    },\n    success_message: \"\",\n    error_message: \"\",\n    validation_errors: {},\n    list_spinner: false,\n    create_update_spinner: false\n};\n\nconst reducer = function (state = initialState, action) {\n    switch (action.type) {\n        case UserTypes.SET_USER_DEFAULTS:\n            return {\n                ...state,\n                user: {...state.user},\n                success_message: \"\",\n                error_message: \"\",\n                validation_errors: {},\n                list_spinner: false,\n                create_update_spinner: false\n            };\n        case UserTypes.LIST_USERS:\n            return {\n                ...state,\n                list_spinner: true\n            };\n        case UserTypes.LIST_USERS_SUCCESS:\n            return {\n                ...state,\n                users: action.data,\n                allUsers:action.data,\n                list_spinner: false\n            };\n        case UserTypes.LIST_USERS_FAILURE:\n            return {\n                ...state,\n                error_message: action.error,\n                list_spinner: false\n            };\n            case UserTypes.SEARCH_DATA:\n                let value = action.data;\n                console.log(state.users.data,'ssssssssssssssss',action.data)\n                if (value) {\n                    let filteredValues = [];\n    \n                    filteredValues.data = state.users.data.filter(user => {\n                        return user.name.toLowerCase().includes(value)\n                    });\n                    \n                    return {\n                        ...state,\n                        users: filteredValues,\n                    };\n                }\n                return {\n                    ...state,\n                    users: state.allUsers,\n                };\n        case UserTypes.CREATE_USERS:\n            return {\n                ...state,\n                create_update_spinner: true\n            };\n        case UserTypes.CREATE_USERS_SUCCESS:\n            return {\n                ...state,\n                create_update_spinner: false,\n                user: action.data.data,\n                success_message: action.data.message,\n                error_message: \"\",\n                validation_errors: {}\n            };\n        case UserTypes.CREATE_USERS_FAILURE:\n            return {\n                ...state,\n                create_update_spinner: false,\n                error_message: action.error.message,\n                validation_errors: action.error.errors,\n                success_message: \"\"\n            };\n        case UserTypes.SHOW_USER:\n            return {\n                ...state,\n                create_update_spinner: true\n            };\n        case UserTypes.SHOW_USER_SUCCESS:\n            return {\n                ...state,\n                create_update_spinner: false,\n                user: {...action.data.data}\n            };\n        case UserTypes.SHOW_USER_FAILURE:\n            return {\n                ...state,\n                create_update_spinner: false,\n                error_message: action.error.message\n            };\n        case UserTypes.EDIT_USERS:\n            return {\n                ...state,\n                create_update_spinner: true\n            };\n        case UserTypes.EDIT_USERS_SUCCESS:\n            return {\n                ...state,\n                create_update_spinner: false,\n                user: action.data.data,\n                success_message: action.data.message,\n                error_message: \"\",\n                validation_errors: {}\n            };\n        case UserTypes.EDIT_USERS_FAILURE:\n            return {\n                ...state,\n                create_update_spinner: false,\n                error_message: action.error.message,\n                validation_errors: action.error.errors,\n                success_message: \"\"\n            };\n        case UserTypes.DELETE_USERS:\n            return {\n                ...state,\n                list_spinner: true\n            };\n        case UserTypes.DELETE_USERS_SUCCESS:\n            let users = state.users;\n            users.data = state.users.data.filter(item => item.id != action.id);\n\n            return {\n                ...state,\n                list_spinner: false,\n                users: users,\n                success_message: action.message,\n                error_message: ''\n            };\n        case UserTypes.DELETE_USERS_FAILURE:\n            return {\n                ...state,\n                list_spinner: false,\n                error_message: action.error.message,\n                success_message: ''\n            };\n        case UserTypes.RESET_USER_FIELDS:\n            return {\n                ...state,\n                user: {\n                    id: \"\",\n                    name: \"\",\n                    email: \"\",\n                    is_admin: 0,\n                    status:0,\n                    portal_number:'',\n                    floor:'',\n                }\n            };\n        case UserTypes.HANDLE_USER_CHANGE:\n            return handleChange(state, action);\n        default:\n            return state;\n    }\n};\n\n/**\n * handle field change\n */\nfunction handleChange(state, action)\n{\n    if(action.field !== 'status') {\n        return {\n            ...state,\n            user: {...state.user, [action.field]: action.data}\n        };\n    } else {\n        if(action.field==='status'){\n            let checked = state.user.status;\n            if(action.checked == true) {\n                checked = 1;\n            } else if(action.checked == false) {\n                checked = 0;\n            }\n    \n            return {\n                ...state,\n                user: {...state.user, status: checked}\n            };\n\n        }else{\n            let checked = state.user.is_admin;\n            if(action.checked == true) {\n                checked = 1;\n            } else if(action.checked == false) {\n                checked = 0;\n            }\n    \n            return {\n                ...state,\n                user: {...state.user, is_admin: checked}\n            };\n        }\n    }\n}\n\nexport default reducer;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const reducer = (state = [], action) => {\n//     console.log(action, '---------------', state)\n//     switch (action.type) {\n//         case 'ADD_TODO':\n//             return [\n//                 ...state,\n//                 {\n//                     id: action.id,\n//                     text: action.text\n//                 }\n//             ]\n\n//         case 'TODO':\n//             let data = JSON.parse(localStorage.getItem('persistantState'))\n//             console.log(data, 'dataaaaaaaaaa');\n//             return data\n\n//         case 'REMOVE_TODO':\n//             return state.filter(({ id }) => id !== action.id);\n\n//         default:\n//             return state\n//     }\n// }\n\n// export default reducer\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // import { HANDLE_ADD } from \"./actions\";\n\n// // const initialState = {\n// //     note : ''\n// // }\n//   // const handleDelete = (id) => {\n//                 //     let list = JSON.parse(localStorage.getItem('data')) || [];\n//                 //     const updatedList = list.filter((list) => list.id !== id);\n//                 //     const updatedRecords = userRecord.filter((record) => record.id !== id);\n//                 //     setUserRecord(updatedRecords);\n//                 //     localStorage.setItem('data', JSON.stringify(updatedList));\n//                 // }\n// // function reducer(state = initialState, action){\n// //     switch(action.type){\n\n// //     }\n// // }"]},"metadata":{},"sourceType":"module"}