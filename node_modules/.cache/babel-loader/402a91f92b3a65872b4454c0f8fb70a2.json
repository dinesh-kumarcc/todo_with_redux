{"ast":null,"code":"const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action, '---------------', state);\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, {\n        id: action.id,\n        text: action.text\n      }];\n\n    case 'TODO':\n      let data = JSON.parse(localStorage.getItem('persistantState'));\n      console.log(data, 'datataaaaaaaaaaaaaaaa'); // return data;\n\n      data.map(todo => todo.id === action.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    case 'FETCH_PRODUCTS_SUCCESS':\n      let list = JSON.parse(localStorage.getItem('persistantState'));\n      return { ...state,\n        state: action.payload.list\n      };\n\n    case 'TOGGLE_TODO':\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        completed: !todo.completed\n      } : todo);\n\n    default:\n      return state;\n    // localStorage.setItem('data',JSON.stringify(state))\n  }\n};\n\nexport default reducer; // import { HANDLE_ADD } from \"./actions\";\n// const initialState = {\n//     note : ''\n// }\n// function reducer(state = initialState, action){\n//     switch(action.type){\n//     }\n// }","map":{"version":3,"sources":["/home/codecorners/demo/redux-todo-app/src/reducers.js"],"names":["reducer","state","action","console","log","type","id","text","data","JSON","parse","localStorage","getItem","map","todo","completed","list","payload"],"mappings":"AAAA,MAAMA,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,iBAApB,EAAuCD,KAAvC;;AACA,UAAQC,MAAM,CAACG,IAAf;AACI,SAAK,UAAL;AACI,aAAO,CACH,GAAGJ,KADA,EAEH;AACIK,QAAAA,EAAE,EAAEJ,MAAM,CAACI,EADf;AAEIC,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAFjB,OAFG,CAAP;;AAQJ,SAAK,MAAL;AACI,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAX;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAAkB,uBAAlB,EAFJ,CAGI;;AACAA,MAAAA,IAAI,CAACK,GAAL,CAASC,IAAI,IACRA,IAAI,CAACR,EAAL,KAAYJ,MAAM,CAACI,EAApB,GACI,EAAC,GAAGQ,IAAJ;AAAUC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,OADJ,GAEID,IAHR;;AAMJ,SAAK,wBAAL;AACI,UAAIE,IAAI,GAAGP,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAX;AACA,aAAO,EACH,GAAGX,KADA;AAEHA,QAAAA,KAAK,EAAEC,MAAM,CAACe,OAAP,CAAeD;AAFnB,OAAP;;AAKA,SAAK,aAAL;AACN,aAAOf,KAAK,CAACY,GAAN,CAAUC,IAAI,IAClBA,IAAI,CAACR,EAAL,KAAYJ,MAAM,CAACI,EAApB,GACI,EAAC,GAAGQ,IAAJ;AAAUC,QAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA3B,OADJ,GAEID,IAHC,CAAP;;AAME;AACI,aAAOb,KAAP;AACJ;AApCJ;AAsCH,CAxCD;;AA0CA,eAAeD,OAAf,C,CAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["const reducer = (state = [], action) => {\n    console.log(action, '---------------', state)\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text\n                }\n            ]\n\n        case 'TODO':\n            let data = JSON.parse(localStorage.getItem('persistantState'))\n            console.log(data, 'datataaaaaaaaaaaaaaaa')\n            // return data;\n            data.map(todo =>\n                (todo.id === action.id)\n                  ? {...todo, completed: !todo.completed}\n                  : todo\n              )\n\n        case 'FETCH_PRODUCTS_SUCCESS':\n            let list = JSON.parse(localStorage.getItem('persistantState'))\n            return {\n                ...state,\n                state: action.payload.list\n            };\n\n            case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      )\n\n        default:\n            return state\n        // localStorage.setItem('data',JSON.stringify(state))\n    }\n}\n\nexport default reducer\n\n\n// import { HANDLE_ADD } from \"./actions\";\n\n// const initialState = {\n//     note : ''\n// }\n\n// function reducer(state = initialState, action){\n//     switch(action.type){\n\n//     }\n// }"]},"metadata":{},"sourceType":"module"}