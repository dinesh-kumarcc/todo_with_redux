{"ast":null,"code":"var _jsxFileName = \"/home/codecorners/demo/redux-todo-app/src/Todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, fetchProductsSuccess, toDo } from './actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddTodo = _ref => {\n  _s();\n\n  let {\n    state\n  } = _ref;\n  const dispatch = useDispatch();\n  let input;\n  const content = useSelector(state => state.toDo);\n  useEffect(() => {\n    input = dispatch({\n      type: 'TODO'\n    });\n    console.log(state, '77777777777777777777777777777'); // list = dispatch({\n    //     type:'TODO',\n    //     payload:state\n    // })\n    // console.log(list,'listtttttttttttttt',state)\n  }, []); // useEffect(()=>{\n  //     let data = JSON.parse(localStorage.getItem('persistantState'));\n  //     console.log(data,'..........................')\n  // },[])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n\n          if (!input.value.trim()) {\n            return;\n          }\n\n          dispatch(addTodo(input.value));\n          input.value = '';\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: node => input = node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'TODO'\n        }),\n        type: \"button\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), state ? state.map(data => /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 36\n      }, this)) : 'no record']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddTodo, \"MHqq3Q4HPf9IE5Q+ohAb6EqvVWE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddTodo;\nexport default connect()(AddTodo); // let data = [];\n// data = JSON.parse(localStorage.getItem('data'))\n// console.log(data,'=========================')\n// return data.map(todo => {\n//     return (todo)\n// }\n// )\n//  (todo.id === action.id)\n// ? {...todo, completed: !todo.completed}\n// : todo\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTodo\");","map":{"version":3,"sources":["/home/codecorners/demo/redux-todo-app/src/Todo.js"],"names":["React","useEffect","connect","addTodo","fetchProductsSuccess","toDo","useDispatch","useSelector","AddTodo","state","dispatch","input","content","type","console","log","e","preventDefault","value","trim","node","map","data","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,oBAAlB,EAAwCC,IAAxC,QAAmD,WAAnD;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;;;;AAEA,MAAMC,OAAO,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC3B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,MAAIK,KAAJ;AAEA,QAAMC,OAAO,GAAGL,WAAW,CAACE,KAAK,IAAIA,KAAK,CAACJ,IAAhB,CAA3B;AAEAJ,EAAAA,SAAS,CAAC,MAAI;AACXU,IAAAA,KAAK,GAAGD,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAkB,+BAAlB,EAFW,CAIV;AACA;AACA;AACA;AACA;AACH,GATQ,EASP,EATO,CAAT,CAN2B,CAkB3B;AACA;AACA;AACA;;AAGF,sBACI;AAAA,4BACF;AAAA,8BACE;AAAM,QAAA,QAAQ,EAAEO,CAAC,IAAI;AACnBA,UAAAA,CAAC,CAACC,cAAF;;AACA,cAAI,CAACN,KAAK,CAACO,KAAN,CAAYC,IAAZ,EAAL,EAAyB;AACvB;AACD;;AACDT,UAAAA,QAAQ,CAACP,OAAO,CAACQ,KAAK,CAACO,KAAP,CAAR,CAAR;AACAP,UAAAA,KAAK,CAACO,KAAN,GAAc,EAAd;AACD,SAPD;AAAA,gCAQE;AAAO,UAAA,GAAG,EAAEE,IAAI,IAAIT,KAAK,GAAGS;AAA5B;AAAA;AAAA;AAAA;AAAA,gBARF,eASE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AAAQ,QAAA,OAAO,EAAE,MAAMV,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAmD,QAAA,IAAI,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADE,eAiCF;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKJ,KAAK,GAAGA,KAAK,CAACY,GAAN,CAAWC,IAAD,iBAAQ;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cAAlB,CAAH,GAA6C,WAFvD;AAAA;AAAA;AAAA;AAAA;AAAA,YAjCE;AAAA,kBADJ;AAyCD,CAjED;;GAAMf,O;UACeF,W,EAGDC,W;;;KAJdC,O;AAmEN,eAAeN,OAAO,GAAGM,OAAH,CAAtB,C,CAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo ,fetchProductsSuccess, toDo} from './actions'\nimport { useDispatch,useSelector } from 'react-redux'\n\nconst AddTodo = ({ state }) => {\n    const dispatch = useDispatch();\n    let input\n\n    const content = useSelector(state => state.toDo);\n\n    useEffect(()=>{\n       input = dispatch({ type: 'TODO' })\n       console.log(state,'77777777777777777777777777777')\n\n        // list = dispatch({\n        //     type:'TODO',\n        //     payload:state\n        // })\n        // console.log(list,'listtttttttttttttt',state)\n    },[])\n\n\n    // useEffect(()=>{\n    //     let data = JSON.parse(localStorage.getItem('persistantState'));\n    //     console.log(data,'..........................')\n    // },[])\n       \n\n  return (\n      <>\n    <div>\n      <form onSubmit={e => {\n        e.preventDefault()\n        if (!input.value.trim()) {\n          return\n        }\n        dispatch(addTodo(input.value))\n        input.value = ''\n      }}>\n        <input ref={node => input = node} />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n      <button onClick={() => dispatch({ type: 'TODO' })} type=\"button\">+</button>\n\n\n\n      {/* <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => toggleTodo(todo.id)}\n      />\n    )}\n  </ul> */}\n\n  \n\n    </div>\n    \n    <div>\n        <h4>data</h4>\n        {state ? state.map((data)=><h2>{data.text}</h2>) : 'no record'}\n        \n    </div>\n    </>\n  )\n}\n\nexport default connect()(AddTodo)\n\n\n\n\n\n\n// let data = [];\n// data = JSON.parse(localStorage.getItem('data'))\n// console.log(data,'=========================')\n// return data.map(todo => {\n//     return (todo)\n// }\n\n// )\n//  (todo.id === action.id)\n// ? {...todo, completed: !todo.completed}\n// : todo\n"]},"metadata":{},"sourceType":"module"}